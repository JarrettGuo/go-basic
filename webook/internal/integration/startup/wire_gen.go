// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package startup

import (
	"github.com/gin-gonic/gin"
	"github.com/google/wire"
	"go-basic/webook/internal/ioc"
	"go-basic/webook/internal/repository"
	article2 "go-basic/webook/internal/repository/article"
	"go-basic/webook/internal/repository/cache"
	"go-basic/webook/internal/repository/dao"
	"go-basic/webook/internal/repository/dao/article"
	"go-basic/webook/internal/service"
	"go-basic/webook/internal/web"
	"go-basic/webook/internal/web/jwt"
)

// Injectors from wire.go:

func InitWebServer() *gin.Engine {
	cmdable := InitRedis()
	handler := jwt.NewRedisJWTHandler(cmdable)
	logger := InitLogger()
	v := ioc.InitMiddlewares(cmdable, handler, logger)
	db := InitDB()
	userDAO := dao.NewUserDAO(db)
	userCache := cache.NewUserCache(cmdable)
	userRepository := repository.NewUserRepository(userDAO, userCache)
	userService := service.NewUserService(userRepository, logger)
	codeCache := cache.NewCodeCache(cmdable)
	codeRepository := repository.NewCodeRepository(codeCache)
	smsService := ioc.InitSMSService(cmdable)
	codeService := service.NewCodeService(codeRepository, smsService)
	userHandler := web.NewUserHandler(userService, codeService, handler)
	wechatService := ioc.InitOAuth2WechatService()
	stateConfig := ioc.NewWechatHandlerConfig()
	oAuth2WechatHandler := web.NewOAuth2WechatHandler(wechatService, userService, handler, stateConfig)
	database := InitMongoDB()
	node := InitSnowflakeNode()
	articleDAO := article.NewMongoDBDAO(database, node)
	readerDAO := article.NewReaderDAO(database, node)
	authorDAO := article.NewAuthorDAO(database, node)
	articleRepository := article2.NewArticleRepository(articleDAO, readerDAO, authorDAO)
	articleService := service.NewArticleService(articleRepository, logger)
	articleHandler := web.NewArticleHandler(articleService, logger)
	engine := ioc.InitWebServer(v, userHandler, oAuth2WechatHandler, articleHandler)
	return engine
}

func InitArticleHandler(dao2 article.ArticleDAO) *web.ArticleHandler {
	database := InitMongoDB()
	node := InitSnowflakeNode()
	readerDAO := article.NewReaderDAO(database, node)
	authorDAO := article.NewAuthorDAO(database, node)
	articleRepository := article2.NewArticleRepository(dao2, readerDAO, authorDAO)
	logger := InitLogger()
	articleService := service.NewArticleService(articleRepository, logger)
	articleHandler := web.NewArticleHandler(articleService, logger)
	return articleHandler
}

// wire.go:

var thirdPartySet = wire.NewSet(
	InitRedis,
	InitDB,
	InitLogger,
	InitMongoDB,
	InitSnowflakeNode,
)

var userSvcProvider = wire.NewSet(dao.NewUserDAO, cache.NewUserCache, repository.NewUserRepository, service.NewUserService)

var articlSvcProvider = wire.NewSet(service.NewArticleService, article.NewReaderDAO, article.NewAuthorDAO, article.NewMongoDBDAO)
